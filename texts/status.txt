Status report (Oct 1, 2025)

Goal
-----
Complete the proof of

  theorem Aqft2.gaussianFreeField_satisfies_all_OS_axioms
    (m : ℝ) [Fact (0 < m)]
    (h_bound : CovarianceBoundedComplex (μ_GFF m))
    (h_euc   : CovarianceEuclideanInvariantℂ (μ_GFF m))
    (h_OS4   : OS4_Clustering (μ_GFF m)) :
    OS0_Analyticity (μ_GFF m) ∧ OS1_Regularity (μ_GFF m) ∧ OS2_EuclideanInvariance (μ_GFF m)
    ∧ OS3_ReflectionPositivity (μ_GFF m) ∧ OS4_Clustering (μ_GFF m)

where μ_GFF m := gaussianFreeField_free m. This theorem currently compiles and bundles the five axioms from existing pieces, but relies on upstream lemmas that still contain sorries. This document evaluates what is needed to discharge all sorries and make the theorem unconditional (i.e., with GFF-specific proofs of the assumptions).

High-level dependency graph
---------------------------
Within GFFfinish.lean, the master theorem uses the following inputs and results:

- isGaussianGJ (μ_GFF m)
  • Source: Aqft2/GFFMconstruct.lean (isGaussianGJ_gaussianFreeField_free)

- OS0_Analyticity (μ_GFF m)
  • Source: Aqft2/GaussianFreeField.lean (gaussianFreeField_satisfies_OS0)
  • Depends on: gaussian_satisfies_OS0 (complete) + CovarianceBilinear (for μ_GFF m)

- OS1_Regularity (μ_GFF m)
  • Source: Aqft2/GaussianFreeField.lean (gaussian_satisfies_OS1)
  • Depends on: isGaussianGJ μ, CovarianceBoundedComplex μ

- OS2_EuclideanInvariance (μ_GFF m)
  • Source: Aqft2/GaussianFreeField.lean (gaussian_satisfies_OS2)
  • Depends on: isGaussianGJ μ, CovarianceEuclideanInvariantℂ μ

- OS3_ReflectionPositivity (μ_GFF m)
  • Source: Aqft2/GFF_OS3.lean (gaussianFreeField_satisfies_OS3)
  • Depends on: factorization lemma from OS3.lean and GFF-specific covariance properties

- OS4_Clustering (μ_GFF m)
  • Source: to be supplied (either directly or via gaussian_satisfies_OS4_clustering)

Current file-by-file status and required work
--------------------------------------------
1) Aqft2/GFFMconstruct.lean
   - isGaussianGJ_gaussianFreeField_free (m) : isGaussianGJ (μ_GFF m)
     • Present; compiles; presumed complete (no explicit warning lines pointed here in build logs).
     • Action: Verify it does not depend on any sorry-based lemmas (notably mixed_deriv_schwinger). If it does, we need to close that dependency loop.
   - gff_two_point_equals_covarianceℂ_free (m f g) : S₂(μ_GFF) = freeCovarianceℂ
     • Referenced from several places (OS3 factorization and elsewhere). Grep shows a lemma at ~line 272. Build warnings showed sorries around 270–298 in GFFMconstruct, so this identity may still be incomplete.
     • Action: Confirm and complete the proof (either via Minlos analytic differentiation or by importing an explicit argument from GFFexplicit).

2) Aqft2/GaussianFreeField.lean
   - gaussian_satisfies_OS0
     • Complete and generic.
   - gaussianFreeField_satisfies_OS0 (m)
     • Present; reduces to gaussian_satisfies_OS0 using:
       - isGaussianGJ_gaussianFreeField_free m (ok)
       - covarianceBilinear_gaussianFreeField m (currently TODO with sorries in this file)
     • Action: Prove CovarianceBilinear (μ_GFF m). Suggested route: reduce to freeCovarianceℂ bilinearity via gff_two_point_equals_covarianceℂ_free.
       - Either prove freeCovarianceℂ_bilinear in GFFexplicit (see below), or keep a direct proof here using the explicit integral representation if available.

   - gaussian_satisfies_OS1 (dμ)
     • Present but contains sorries:
       1) Product-to-sum inequality to get a clean exponential bound.
       2) TwoPointIntegrable proof for p = 2 branch.
     • Action: Close these sorries once and for all. A workable plan:
       - Use |Re z| ≤ |z| and then bound ‖S₂ f f‖ by M · ‖f‖₁ · ‖f‖₂ (given by CovarianceBoundedComplex). Convert the product into a sum with Young’s inequality or 2ab ≤ a² + b² and adjust constants to match the target bound shape.
       - Provide a lemma TwoPointIntegrable for Gaussian measures with bounded covariance or directly for μ_GFF using the explicit kernel bounds.

   - gaussian_satisfies_OS2 (dμ)
     • Present and complete (no sorries). Given isGaussianGJ and CovarianceEuclideanInvariantℂ, it proves OS2.

   - OS4 section (gaussian_satisfies_OS4_clustering)
     • Currently a skeleton with sorries; translation function translate_test_function is undefined; clustering lemma is unproven.
     • Action: Either:
       (A) Provide a GFF-specific OS4 lemma directly, or
       (B) Complete the generic gaussian_satisfies_OS4_clustering by:
           - implementing translate_test_function (spatial translation on Schwartz/TestFunction),
           - proving CovarianceClustering for μ_GFF from known decay of the massive propagator, then
           - applying the generic lemma to conclude OS4.

3) Aqft2/GFF_OS3.lean
   - gaussianFreeField_satisfies_OS3 (m)
     • Current status:
       - covarianceBilinear_gaussianFreeField_free m : DONE. Reused
         `covarianceBilinear_gaussianFreeField m` from `GaussianFreeField.lean`.
       - entrywiseExp_posSemidef_of_posSemidef : DONE (wiring). Implemented via a
         small wrapper using `Aqft2.posSemidef_entrywiseExp_hadamardSeries_of_posSemidef`
         and `entrywiseExp_eq_hadamardSeries`. Note: the HadamardExp lemma itself is
         still a sorry; see point 6.
       - reflectionInvariance_gaussianFreeField_free m : TODO. Reduce to
         `freeCovarianceℂ_reflection_invariant` (GFFexplicit) +
         `gff_two_point_equals_covarianceℂ_free`, or provide a direct μ_GFF lemma.
       - covarianceReflectionPositive_gaussianFreeField_free m : TODO. Use
         `reflection_matrix_posSemidef` (Covariance.lean) with
         `freeCovarianceℂ_reflection_positive` (GFFexplicit), then transfer to S₂ via
         `gff_two_point_equals_covarianceℂ_free`.
       - freeCovarianceHermitian : removed (not required for the OS3 factorization proof).
     • Action: Finish the two remaining properties (reflection invariance and reflection
       positivity) by importing/finishing the explicit covariance lemmas and ensure
       `gff_two_point_equals_covarianceℂ_free` is available without circularity.

4) Aqft2/OS3.lean (shared infrastructure)
   - gaussian_quadratic_real_rewrite (factorization lemma used in GFF_OS3)
     • Ensure this lemma is fully proven (the file still has some sorries per build output). If gaussian_quadratic_real_rewrite itself has sorries, OS3 for GFF remains blocked.
     • Action: Finish the generic factorization (no GFF-specific content required here), keeping hypotheses only on Gaussianity, bilinearity, and reflection invariance.

5) Aqft2/GFFexplicit.lean (optional but recommended path to close GFF-specific properties)
   - This file outlines explicit exponential and covariance properties for the free field but is mostly stubs. Completing it would cleanly discharge many of the above:
     • gaussianFreeField_generating_functional_explicit
     • schwinger_two_point_explicit (S₂ = freeCovarianceℂ)
     • freeCovarianceℂ_bilinear
     • freeCovarianceℂ_reflection_invariant
     • freeCovarianceℂ_reflection_positive (matrix positivity statement)
     • isGaussianGJ_from_explicit_form, covarianceBilinear_from_explicit_form,
       reflectionInvariance_from_explicit_form, covarianceReflectionPositive_from_explicit_form
   - Action: Decide whether to (A) complete these explicit lemmas and then refactor GFF_OS3 and GaussianFreeField to import them, or (B) avoid this file and prove the properties directly in the existing files (more ad hoc). Option (A) is cleaner.

6) Aqft2/HadamardExp.lean
   - Needs a finished lemma that entrywise exp preserves PSD for real symmetric PSD matrices (finite index), exactly the ingredient used by GFF_OS3:
     • Concrete lemma present (currently sorry):
       `posSemidef_entrywiseExp_hadamardSeries_of_posSemidef (R : Matrix ι ι ℝ) (hR : R.PosSemidef) :
          (entrywiseExp_hadamardSeries R).PosSemidef`.
     • With `entrywiseExp_eq_hadamardSeries`, this yields PSD for the entrywise exponential.
   - Action: finish the continuity/limit argument in this lemma. Once done, GFF_OS3’s use-site via the wrapper `entrywiseExp_posSemidef_of_posSemidef` is fully justified.

7) Aqft2/Covariance.lean (and possibly Aqft2/Euclidean.lean)
   - Reflection positivity infrastructure: reflection_matrix_posSemidef dμ hRP f
   - Euclidean invariance structures (actions on test functions)
   - Action: verify the general lemmas are complete and expose GFF-specializations:
     • CovarianceEuclideanInvariantℂ (μ_GFF m)
     • Reflection invariance/positivity once freeCovarianceℂ properties are known.

8) Aqft2/OS4.lean
   - OS4 framework exists with sorries in generic reasoning.
   - Action: either finish a general Gaussian OS4 lemma (accepting a decay hypothesis) or provide a dedicated GFF OS4 proof.

Concrete task list to finish the master theorem without assumptions
------------------------------------------------------------------
Below are the minimal items to eliminate all assumptions in gaussianFreeField_satisfies_all_OS_axioms and remove sorries on the path to it. The order is a feasible sequence that minimizes circular dependencies.

[OS0 path]
- [T1] Prove gff_two_point_equals_covarianceℂ_free (μ_GFF two-point = freeCovarianceℂ) in GFFMconstruct or GFFexplicit.
- [T2] Prove freeCovarianceℂ_bilinear (GFFexplicit) and then
       CovarianceBilinear (μ_GFF m) by transfer via [T1].
- [T3] gaussianFreeField_satisfies_OS0 then follows immediately from gaussian_satisfies_OS0.

[OS1 path]
- [T4] Complete gaussian_satisfies_OS1 (no sorries):
      - Prove the product→sum bound in the exponent (e.g., 2ab ≤ a² + b² or an explicit constant C · (‖f‖₁ + ‖f‖₂)).
      - Provide TwoPointIntegrable for p = 2 (can be a separate lemma for Gaussian measures with bounded covariance or specifically for μ_GFF using kernel bounds).
- [T5] Prove CovarianceBoundedComplex (μ_GFF m) from explicit bounds on freeCovarianceℂ (Fourier/propagator estimate).

[OS2 path]
- [T6] Prove CovarianceEuclideanInvariantℂ (μ_GFF m): invariance of the free covariance under the Euclidean action.
- [T7] OS2 then follows from gaussian_satisfies_OS2.

[OS3 path]
- [T8] Finish OS3 infrastructure in OS3.lean if any sorries remain in the factorization lemma gaussian_quadratic_real_rewrite.
- [T9] In GFF_OS3:
      - Provide covarianceBilinear_gaussianFreeField_free via [T2].
      - Provide reflectionInvariance_gaussianFreeField_free via freeCovarianceℂ_reflection_invariant + [T1].
      - Provide covarianceReflectionPositive_gaussianFreeField_free via freeCovarianceℂ_reflection_positive + reflection_matrix_posSemidef + [T1].
      - Replace entrywiseExp_posSemidef_of_posSemidef with the finished lemma from HadamardExp ([T10]).
- [T10] Finalize HadamardExp lemma "entrywise exp preserves PSD" and export it.
- [T11] (Optional) Provide a stand-alone hermitian lemma for S₂(μ_GFF) from freeCovarianceℂ real-symmetry; not strictly required if not used elsewhere.

[OS4 path]
- [T12] Implement translate_test_function and related translation machinery on TestFunction/Schwartz.
- [T13] Prove CovarianceClustering (μ_GFF m): use decay of the massive free propagator to show |S₂(f, g_Δ)| → 0 as Δ → ∞. Sketch approaches:
      - Fourier side: the kernel has exponential decay ~ e^{-m |x|};
      - Potential theory: standard massive Green’s function bounds.
- [T14] Finish gaussian_satisfies_OS4_clustering using [T12]-[T13], or provide a GFF-specific OS4 lemma that directly yields OS4_Clustering (μ_GFF m).

Other cleanup / verification
----------------------------
- Check circularity: Ensure isGaussianGJ_gaussianFreeField_free and gff_two_point_equals_covarianceℂ_free do not depend on each other in a circular way (earlier work on mixed derivatives suggested a potential circle). If necessary, decouple: prove S₂ = C directly from the definition of the free covariance and the generating functional (no reliance on mixed_deriv_schwinger).
- Decide whether to pursue the explicit route (GFFexplicit.lean) or keep all proofs in GFFMconstruct/GFF_OS3/GaussianFreeField. The explicit route is recommended for clarity and modularity.

Quick checklist (by file / lemma)
----------------------------------
Aqft2/GFFMconstruct.lean
- [ ] gff_two_point_equals_covarianceℂ_free (finish)

Aqft2/GaussianFreeField.lean
- [ ] covarianceBilinear_gaussianFreeField (finish)
- [ ] gaussian_satisfies_OS1: remove sorries (bound + TwoPointIntegrable)
- [ ] translate_test_function (define)
- [ ] gaussian_satisfies_OS4_clustering (finish)
- [ ] CovarianceBoundedComplex (μ_GFF m): provide GFF-specific lemma
- [ ] CovarianceEuclideanInvariantℂ (μ_GFF m): provide GFF-specific lemma (or import from Euclidean/Covariance if already available)

Aqft2/GFF_OS3.lean
- [ ] covarianceBilinear_gaussianFreeField_free (finish via transfer)
- [ ] reflectionInvariance_gaussianFreeField_free (finish via transfer)
- [ ] covarianceReflectionPositive_gaussianFreeField_free (finish via matrix positivity)
- [ ] entrywiseExp_posSemidef_of_posSemidef (replace with HadamardExp lemma)
- [ ] (optional) freeCovarianceHermitian (supply or remove if unused)

Aqft2/OS3.lean
- [ ] gaussian_quadratic_real_rewrite: ensure no sorries remain

Aqft2/HadamardExp.lean
- [ ] Provide/finish: PSD(R) ⇒ PSD(exp ∘ R) (finite index, real symmetric)

Aqft2/GFFexplicit.lean (if using explicit route)
- [ ] gaussianFreeField_generating_functional_explicit
- [ ] schwinger_two_point_explicit
- [ ] freeCovarianceℂ_bilinear
- [ ] freeCovarianceℂ_reflection_invariant
- [ ] freeCovarianceℂ_reflection_positive
- [ ] isGaussianGJ_from_explicit_form, covarianceBilinear_from_explicit_form, etc.

Minimal path to close the master theorem
----------------------------------------
If we aim for the least work to make gaussianFreeField_satisfies_all_OS_axioms unconditional (no assumptions), the tightest path is:

1) Close OS0:
   - Finish gff_two_point_equals_covarianceℂ_free.
   - Finish CovarianceBilinear (μ_GFF m) (from freeCovarianceℂ bilinear or direct).

2) Close OS1:
   - Finish gaussian_satisfies_OS1 (no sorries).
   - Prove CovarianceBoundedComplex (μ_GFF m).

3) Close OS2:
   - Prove CovarianceEuclideanInvariantℂ (μ_GFF m).

4) Close OS3:
   - Ensure gaussian_quadratic_real_rewrite is complete in OS3.lean.
   - Provide the four GFF-specific support lemmas in GFF_OS3 (bilinear, reflection invariance, RP, exp-PSD), possibly by importing a single HadamardExp lemma.

5) Close OS4:
   - Implement translate_test_function and finish gaussian_satisfies_OS4_clustering, together with a GFF-specific proof of CovarianceClustering.

With these in place, the top-level theorem in GFFfinish.lean no longer needs external assumptions and will certify that the free GFF satisfies OS0–OS4.

Notes and recommendations
-------------------------
- Prefer the explicit (kernel-based) approach to the free covariance where possible; it makes bilinearity, hermiticity, reflection invariance, and positivity straightforward linear-algebraic facts.
- The HadamardExp step (entrywise exp preserves PSD) is a standard tool; once that lemma is in place, the matrix factorization proof of OS3 becomes short and robust.
- Keep OS3’s factorization lemma independent from GFF specifics; it should only require Gaussianity, bilinearity, and reflection invariance—thus reusable for other models.
- For OS4, relying on the massive propagator’s exponential decay in the time direction is standard; plan to either cite/encode a known bound or prove it in a simplified setting sufficient for the TestFunction class.

End of status.
