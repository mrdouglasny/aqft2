/-
Copyright (c) 2025 MRD and SH. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors:
-/

import Mathlib.Tactic  -- gives `ext` and `simp` power
import Mathlib.Data.Complex.Basic
import Mathlib.Data.Complex.Module
import Mathlib.Data.Complex.Exponential
import Mathlib.Analysis.InnerProductSpace.PiL2
import Mathlib.Analysis.InnerProductSpace.LinearMap
import Mathlib.Analysis.Complex.Basic
import Mathlib.Analysis.Analytic.Basic
import Mathlib.Analysis.Analytic.Constructions
import Mathlib.Analysis.SpecialFunctions.Complex.Analytic

import Mathlib.Topology.Algebra.Module.LinearMapPiProd

import Mathlib.MeasureTheory.Measure.Decomposition.RadonNikodym
import Mathlib.MeasureTheory.Measure.Haar.OfBasis
import Mathlib.MeasureTheory.Measure.ProbabilityMeasure
import Mathlib.MeasureTheory.Function.LpSpace.Basic
import Mathlib.MeasureTheory.Function.L2Space
import Mathlib.MeasureTheory.Integral.Bochner.Basic
import Mathlib.MeasureTheory.Measure.CharacteristicFunction

import Mathlib.Probability.Independence.Basic
import Mathlib.Probability.Density

import Aqft2.Basic

/- These are the O-S axioms in the form given in Glimm and Jaffe, Quantum Physics, pp. 89-90 -/

open MeasureTheory NNReal ENNReal
open TopologicalSpace Measure

noncomputable section
open scoped MeasureTheory Complex BigOperators
--open scoped RealInnerProductSpace

/- OS0 Analyticity -/

abbrev ‚ÑÇn (n : ‚Ñï) := Fin n ‚Üí ‚ÑÇ
-- EuclideanSpace ‚ÑÇ (Fin n)

variable (n : ‚Ñï)
def foo := (‚àë n_1, fun x : ‚ÑÇn n => x n_1 ^ 2)
def bar := (fun x : ‚ÑÇn n ‚Ü¶ ‚àë i ‚àà (Finset.univ : Finset (Fin n)), (x i) ^ 2)
#check foo
#check bar



--example test : foo = bar

def Entire {n : ‚Ñï} (f : ‚ÑÇn n ‚Üí ‚ÑÇ) : Prop :=
  AnalyticOn ‚ÑÇ f Set.univ          --  ‚áî  ‚àÄ z, HolomorphicAt ‚ÑÇ f z

def gaussian1 (z : ‚ÑÇ) : ‚ÑÇ := Complex.exp (-(z ^ 2))

lemma h_exp_arg : AnalyticOn ‚ÑÇ (fun z : ‚ÑÇ ‚Ü¶ -(z ^ 2)) Set.univ :=
  ((analyticOn_id (ùïú := ‚ÑÇ) (E := ‚ÑÇ) (s := Set.univ)).pow 2).neg

/-- The Gaussian is analytic on all of ‚ÑÇ ‚Äì i.e. *entire*. -/
lemma gaussian1_entire : AnalyticOn ‚ÑÇ gaussian1 Set.univ := by
 simpa [gaussian1] using
  ((analyticOn_id (ùïú := ‚ÑÇ) (E := ‚ÑÇ) (s := Set.univ)).pow 2).neg.cexp

def gaussian (x : ‚ÑÇn n) : ‚ÑÇ := Complex.exp (-‚àë i, (x i)^2)

lemma sumSquares_analytic {n : ‚Ñï} :
    AnalyticOn ‚ÑÇ (fun x : ‚ÑÇn n ‚Ü¶ ‚àë i, (x i) ^ 2) Set.univ := by
  /- 1.  Each coordinate projection is analytic-on-a-neighbourhood. -/
  have h_coord (i : Fin n) :
      AnalyticOnNhd ‚ÑÇ (fun x : ‚ÑÇn n ‚Ü¶ x i) Set.univ :=
      (ContinuousLinearMap.proj i : ‚ÑÇn n ‚ÜíL[‚ÑÇ] ‚ÑÇ).analyticOnNhd _

  /- 2.  Square it (`(hf).pow 2`) ‚Äì still `AnalyticOnNhd`. -/
  have h_sq (i : Fin n) :
      AnalyticOnNhd ‚ÑÇ (fun x : ‚ÑÇn n ‚Ü¶ (x i) ^ 2) Set.univ :=
      (h_coord i).pow 2

  have h_sum_aux :
      AnalyticOnNhd ‚ÑÇ
        (fun x : ‚ÑÇn n ‚Ü¶ ‚àë i ‚àà (Finset.univ : Finset (Fin n)), (x i) ^ 2)
        Set.univ := by
          have foo := Finset.analyticOnNhd_sum
             (N := (Finset.univ : Finset (Fin n)))
              (f := fun i ‚Ü¶ fun x : ‚ÑÇn n ‚Ü¶ (x i) ^ 2)
             (Œª i _hi ‚Ü¶ h_sq i)
          simpa using sorry

  simpa [Finset.sum_apply] using h_sum_aux.analyticOn

variable (x : ‚ÑÇ) (f : TestFunction‚ÑÇ)

#check x ‚Ä¢ f        -- Lean should report:  `x ‚Ä¢ f : TestFunction‚ÑÇ`

variable {n : ‚Ñï}
variable (z : ‚ÑÇn n)               -- coefficients
variable (J : Fin n ‚Üí TestFunction‚ÑÇ)   -- test functions

variable {f : ‚ÑÇn n ‚Üí ‚ÑÇ}

#check AnalyticOn ‚ÑÇ f Set.univ  -- joint analyticity in all n coordinates

/-- **Linear combination operator**
    `weightedSumCLM J` takes a coefficient vector `z : ‚ÑÇ‚Åø` and returns the test
    function `‚àë i, z i ‚Ä¢ J i`.  Being linear and the domain finite-dimensional,
    it is automatically continuous, so we package it as a `ContinuousLinearMap`. -/
noncomputable
def weightedSumCLM : ‚ÑÇn n ‚ÜíL[‚ÑÇ] TestFunction‚ÑÇ := by
  let L : ‚ÑÇn n ‚Üí‚Çó[‚ÑÇ] TestFunction‚ÑÇ :=
    { toFun      := fun z ‚Ü¶ (Finset.univ).sum (fun i ‚Ü¶ z i ‚Ä¢ J i),
      map_add'   := by
        intro z‚ÇÅ z‚ÇÇ
        simp [add_smul, Finset.sum_add_distrib],
      map_smul' := by
        intro c z
        simp [smul_smul, Finset.smul_sum]
    }
  have hcont : Continuous L := L.continuous_of_finiteDimensional
  exact { toLinearMap := L, cont := hcont }

abbrev weightedSum (z : ‚ÑÇn n) : TestFunction‚ÑÇ := weightedSumCLM J z

variable (dŒº : ProbabilityMeasure FieldSpace)

#check (generatingFunctional dŒº (weightedSum J z))

/-- GJ Axiom OS0. -/

lemma GJAxiom_OS0 : AnalyticOn ‚ÑÇ (generatingFunctional (weightedSum J))  Set.univ := by
  sorry

/-- **Entire‚Äêness**: the map `z ‚Ü¶ ‚àë z·µ¢ ‚Ä¢ J·µ¢` is analytic on all of ‚ÑÇ‚Åø. -/
lemma weightedSum_analytic :
    AnalyticOn ‚ÑÇ (generatingFunctional (weightedSum J)) Set.univ :=
      (weightedSumCLM J).analyticOn _
