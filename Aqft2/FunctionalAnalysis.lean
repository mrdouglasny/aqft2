
/-¬© 2025 Math definitions which arguably should be in mathlib
 -/

import Mathlib.Tactic  -- gives `ext` and `simp` power
import Mathlib.Data.Complex.Basic
import Mathlib.Data.Complex.Module
import Mathlib.Analysis.InnerProductSpace.LinearMap
import Mathlib.Analysis.Distribution.SchwartzSpace

import Mathlib.Topology.Algebra.Module.LinearMapPiProd

import Mathlib.MeasureTheory.Function.LpSpace.Basic
import Mathlib.MeasureTheory.Function.L2Space
import Mathlib.MeasureTheory.Integral.Bochner.Basic
import Mathlib.MeasureTheory.Measure.CharacteristicFunction

import Mathlib.Analysis.RCLike.Basic
import Mathlib.Analysis.NormedSpace.RCLike
import Mathlib.Analysis.NormedSpace.Real

open MeasureTheory NNReal ENNReal
open TopologicalSpace Measure

noncomputable section

/- Multiplication of Schwarz functions
 -/

open scoped SchwartzMap

variable {ùïú : Type} [RCLike ùïú]
variable {E : Type} [NormedAddCommGroup E] [NormedSpace ‚ÑÇ E]

lemma SchwartzMap.hasTemperateGrowth
    {V : Type*} [NormedAddCommGroup V] [NormedSpace ‚Ñù V]
    (g : ùì¢(E, V)) :
    Function.HasTemperateGrowth (‚áëg) := by
  refine ‚ü®g.smooth', ?_‚ü©
  intro n
  -- take k = 0 in the decay estimate
  rcases g.decay' 0 n with ‚ü®C, hC‚ü©
  refine ‚ü®0, C, ?_‚ü©
  intro x
  have : ‚Äñx‚Äñ ^ 0 * ‚ÄñiteratedFDeriv ‚Ñù n g x‚Äñ ‚â§ C := by
    simpa using hC x
  simpa using this
