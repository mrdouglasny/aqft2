/-
Copyright (c) 2025 MRD and SH. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors:
-/

import Mathlib.Algebra.Algebra.Defs
import Mathlib.Data.Complex.Exponential
import Mathlib.Analysis.InnerProductSpace.PiL2
import Mathlib.Analysis.InnerProductSpace.LinearMap
import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.Analysis.Complex.Basic
import Mathlib.MeasureTheory.Measure.Decomposition.RadonNikodym
import Mathlib.MeasureTheory.Measure.Haar.OfBasis
import Mathlib.MeasureTheory.Measure.ProbabilityMeasure
import Mathlib.MeasureTheory.Function.LpSpace.Basic
import Mathlib.MeasureTheory.Function.L2Space
import Mathlib.MeasureTheory.Integral.Bochner.Basic
import Mathlib.MeasureTheory.Measure.CharacteristicFunction

import Mathlib.Analysis.RCLike.Basic
import Mathlib.Analysis.NormedSpace.RCLike
import Mathlib.Analysis.NormedSpace.Real
import Mathlib.Analysis.NormedSpace.Extend

import Mathlib.Probability.Independence.Basic
import Mathlib.Probability.Density

import Aqft2.Basic

open MeasureTheory NNReal ENNReal
open TopologicalSpace Measure


noncomputable section
open scoped MeasureTheory Complex

/- complexified version -/

def phi (J : TestFunction‚ÑÇ) : ComplexFieldSpace ‚ÜíL[‚ÑÇ] ‚ÑÇ :=
  innerSL ‚ÑÇ (E := ComplexFieldSpace) (J.toLp (p := 2) (Œº := Œº))

def liftto‚ÑÇ : FieldSpace ‚ÜíL[‚Ñù] ComplexFieldSpace := sorry

def pairingCLM‚ÑÇ (J : TestFunction‚ÑÇ) : ComplexFieldSpace ‚ÜíL[‚ÑÇ] ‚ÑÇ :=
  (innerSL ‚ÑÇ (E := ComplexFieldSpace))
    (J.toLp (p := 2) (Œº := Œº))

def charFunDual‚Ñù (J : Lp ‚Ñù 2 Œº) : (Lp ‚Ñù 2 Œº) ‚ÜíL[‚Ñù] ‚Ñù :=
  innerSL ‚Ñù (E := Lp ‚Ñù 2 Œº) J

def ofRealCLM : ‚Ñù ‚ÜíL[‚Ñù] ‚ÑÇ :=
{ toLinearMap :=
    { toFun       := fun t ‚Ü¶ (t : ‚ÑÇ),
      map_add'    := by simp,
      map_smul' := by simp }
  }

def charFunDual_fromReal (J : Lp ‚Ñù 2 Œº) :
    (Lp ‚Ñù 2 Œº) ‚ÜíL[‚Ñù] ‚ÑÇ :=
  ofRealCLM.comp (charFunDual‚Ñù J)

def charFunDual_fromReal' (J : Lp ‚Ñù 2 Œº) : (Lp ‚Ñù 2 Œº) ‚ÜíL[‚Ñù] ‚ÑÇ :=
  (charFunDual‚Ñù J).extendToùïú ‚ÑÇ

def generatingFunctional‚ÑÇ (J : TestFunction‚ÑÇ) : ‚ÑÇ :=
  charFunDual dŒº (pairingCLM‚ÑÇ J)

/- Local functionals on fields -/
def polyObservable (p : Polynomial ‚Ñù) (œÜ : FieldSpace) : ‚Ñù :=
  ‚à´ x, p.eval ((œÜ : RSpaceTime ‚Üí‚Çò[Œº] ‚Ñù) x) ‚àÇŒº

/- stuff -/
def realToComplexCLM : (Lp ‚Ñù 2 Œº) ‚ÜíL[‚Ñù] Lp ‚ÑÇ 2 Œº :=
  (fun f ‚Ü¶ f.map _ (fun x ‚Ü¶ (algebraMap ‚Ñù ‚ÑÇ (f x))).measurable
                (by simpa using f.mem_‚Ñíp_complex_iff.1 f.mem_‚Ñíp))
  |>.mkContinuousOfExistsBound 1 (by
        refine ‚ü®1, ?_‚ü©; intros f; simp)  -- any linear map on a finite-dim space is bounded

#check Lp.realToComplex (Œº := Œº)  --  Lp ‚Ñù Œº p ‚âÉ‚Çó·µµ[‚Ñù] Lp ‚ÑÇ Œº p

def realToComplexCLM : Lp ‚Ñù (p := 2) Œº ‚ÜíL[‚ÑÇ] Lp ‚ÑÇ (p := 2) Œº :=
  ((Lp.realToComplex Œº).restrict_scalars ‚ÑÇ).toContinuousLinearMap

noncomputable
def charFunDual_fromReal (J : Lp ‚Ñù Œº 2) : (Lp ‚ÑÇ Œº 2) ‚ÜíL[‚ÑÇ] ‚ÑÇ :=
  charFunDual‚ÑÇ (Œº := Œº) (realToComplexCLM J)
