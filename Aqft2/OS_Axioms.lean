/-
Copyright (c) 2025 MRD and SH. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors:
-/

import Mathlib.Tactic  -- gives `ext` and `simp` power
import Mathlib.Data.Complex.Basic
import Mathlib.Data.Complex.Module
import Mathlib.Data.Complex.Exponential
import Mathlib.Algebra.Group.Support
import Mathlib.Algebra.Star.Basic
import Mathlib.Analysis.InnerProductSpace.LinearMap
import Mathlib.Analysis.Complex.Basic
import Mathlib.Analysis.Analytic.Basic
import Mathlib.Analysis.Analytic.Constructions
import Mathlib.Analysis.SpecialFunctions.Complex.Analytic
import Mathlib.Analysis.Distribution.SchwartzSpace

import Mathlib.Topology.Algebra.Module.LinearMapPiProd

import Mathlib.MeasureTheory.Measure.Decomposition.RadonNikodym
import Mathlib.MeasureTheory.Measure.Haar.OfBasis
import Mathlib.MeasureTheory.Measure.ProbabilityMeasure
import Mathlib.MeasureTheory.Function.LpSpace.Basic
import Mathlib.MeasureTheory.Function.L2Space
import Mathlib.MeasureTheory.Integral.Bochner.Basic
import Mathlib.MeasureTheory.Measure.CharacteristicFunction

import Mathlib.Probability.Independence.Basic
import Mathlib.Probability.Density

import Mathlib.Analysis.RCLike.Basic
import Mathlib.Analysis.NormedSpace.RCLike
import Mathlib.Analysis.NormedSpace.Real

import Mathlib.LinearAlgebra.TensorAlgebra.Basic

import Aqft2.FunctionalAnalysis
import Aqft2.Basic
import Aqft2.EuclideanS
import Aqft2.DiscreteSymmetry
import Aqft2.SCV

/- These are the O-S axioms in the form given in Glimm and Jaffe, Quantum Physics, pp. 89-90 -/

open MeasureTheory NNReal ENNReal
open TopologicalSpace Measure SCV QFT

noncomputable section
open scoped MeasureTheory Complex BigOperators

/- OS0 Analyticity -/

variable (n : ‚Ñï)
variable (J : Fin n ‚Üí TestFunction‚ÑÇ)   -- test functions
variable (z : ‚ÑÇn n)               -- coefficients
variable (dŒº : ProbabilityMeasure FieldSpace)

#check weightedSumCLM (n := n) (J := J) z

abbrev weightedSum (z : ‚ÑÇn n) : TestFunction‚ÑÇ := weightedSumCLM (n := n) (J := J) z

#check (weightedSum n J z)

def trial (z : ‚ÑÇn n) : ‚ÑÇ := generatingFunctional‚ÑÇ dŒº (weightedSum n J z)

axiom GJAxiom_OS0 : Entire (trial n J dŒº)

/-- OS3 Reflection Positivity -/

def HasPositiveTime (x : SpaceTime) : Prop := getTimeComponent x > 0
def positiveTimeSet : Set SpaceTime := {x | HasPositiveTime x}

open Function

-- Ensure this set is actually open.
lemma is_open_positiveTimeSet : IsOpen positiveTimeSet :=
  isOpen_lt continuous_const (continuous_apply (0 : Fin STDimension))

def PositiveTimeTestFunctions.submodule : Submodule ‚ÑÇ TestFunction‚ÑÇ where
  carrier := { f :  TestFunction‚ÑÇ | tsupport f ‚äÜ positiveTimeSet }
  zero_mem' := by
    simp only [Set.mem_setOf_eq]
    suffices h : tsupport (0 : TestFunction‚ÑÇ) = ‚àÖ by
      rw [h]
      apply Set.empty_subset
    rw [tsupport_eq_empty_iff]
    rfl
  add_mem'  := fun hf hg => (tsupport_add).trans (Set.union_subset hf hg)
  smul_mem' := fun c f hf => by
    refine (tsupport_smul_subset_right (fun _ : SpaceTime => c) f).trans hf

abbrev PositiveTimeTestFunction : Type := PositiveTimeTestFunctions.submodule
instance : AddCommMonoid PositiveTimeTestFunction := by infer_instance
instance : AddCommGroup PositiveTimeTestFunction := by infer_instance

def EuclideanAlgebra : Type :=
  TensorAlgebra ‚ÑÇ PositiveTimeTestFunction

variable (f : TestFunction‚ÑÇ)
#check f.smooth'

noncomputable def compTimeReflection : TestFunction‚ÑÇ ‚ÜíL[‚Ñù] TestFunction‚ÑÇ := by
  have hg_upper : ‚àÉ (k : ‚Ñï) (C : ‚Ñù), ‚àÄ (x : SpaceTime), ‚Äñx‚Äñ ‚â§ C * (1 + ‚ÄñtimeReflectionCLM x‚Äñ) ^ k := by
    use 1; use 1; simp; intro x
    have hh := ContinuousLinearMap.le_opNorm timeReflectionCLM x
    have hhh := 0 < ‚ÄñtimeReflectionCLM‚Äñ
    sorry
  exact SchwartzMap.compCLM (ùïú := ‚Ñù) (hg := timeReflectionCLM.hasTemperateGrowth) (hg_upper := hg_upper)

#check compTimeReflection

noncomputable instance : Star TestFunction‚ÑÇ where
  star f := {
    toFun := fun x ‚Ü¶ star (f (timeReflection x)),
    smooth' := by
      exact Complex.conjLIE.toContinuousLinearMap.contDiff.comp (f.smooth'.comp timeReflectionCLM.contDiff)
    decay' := by
      intro k n
      -- Get the decay bound for f
      rcases f.decay' k n with ‚ü®C, hf‚ü©
      use C
      intro x
      simp only [star]

      -- Key fact: timeReflection is a linear isometry
      have h_iso : ‚àÄ y : SpaceTime, ‚ÄñtimeReflection y‚Äñ = ‚Äñy‚Äñ := by
        intro y
        have h := LinearIsometryEquiv.norm_map (timeReflectionLE : SpaceTime ‚âÉ‚Çó·µ¢[‚Ñù] SpaceTime)
        exact h y

      -- The complex conjugate doesn't change norms
      have h_conj_norm : ‚àÄ z : ‚ÑÇ, ‚Äñstar z‚Äñ = ‚Äñz‚Äñ := by
        intro z
        exact Complex.norm_conj z

      -- Now we can chain our inequalities
      calc
        ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n (fun x ‚Ü¶ star (f (timeReflection x))) x‚Äñ = ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n (star ‚àò f ‚àò timeReflection) x‚Äñ := by
          rfl
        _ = ‚ÄñtimeReflection (timeReflection x)‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n (star ‚àò f ‚àò timeReflection) x‚Äñ := by
          rw [h_iso (timeReflection x)]
        _ = ‚ÄñtimeReflection x‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n f (timeReflection x)‚Äñ := by
          sorry  -- Need lemma about derivatives of composed functions
        _ ‚â§ C := by
          exact hf (timeReflection x)
  }

variable {E : Type} [NormedAddCommGroup E] [NormedSpace ‚ÑÇ E]

open scoped SchwartzMap

/-- The constant‚Äêfield bilinear map `B(a)(b) = a‚ÄØ*‚ÄØb`. -/
abbrev V := ‚ÑÇ
def pointwiseMulCLM : ‚ÑÇ ‚ÜíL[‚ÑÇ] ‚ÑÇ ‚ÜíL[‚ÑÇ] ‚ÑÇ := ContinuousLinearMap.mul ‚ÑÇ ‚ÑÇ

/- for some reason the version in FunctionalAnalysis doesn't elaborate -/
lemma SchwartzMap.hasTemperateGrowth'
    {V : Type*} [NormedAddCommGroup V] [NormedSpace ‚Ñù V]
    (g : ùì¢(SpaceTime, V)) :
    Function.HasTemperateGrowth (‚áëg) := by
  refine ‚ü®g.smooth', ?_‚ü©
  intro n
  -- take k = 0 in the decay estimate
  rcases g.decay' 0 n with ‚ü®C, hC‚ü©
  refine ‚ü®0, C, ?_‚ü©
  intro x
  have : ‚Äñx‚Äñ ^ 0 * ‚ÄñiteratedFDeriv ‚Ñù n g x‚Äñ ‚â§ C := by
    simpa using hC x
  simpa using this


/-- Multiplication lifted to the Schwartz space. -/
def schwartzMul (g : TestFunction‚ÑÇ) : TestFunction‚ÑÇ ‚ÜíL[‚ÑÇ] TestFunction‚ÑÇ :=
  (SchwartzMap.bilinLeftCLM pointwiseMulCLM (g.hasTemperateGrowth'))

variable (f_positive : PositiveTimeTestFunction)

def starred_f' : TestFunction‚ÑÇ := star f_positive.val

#check star (f_positive : TestFunction‚ÑÇ)

def S (f : TestFunction) : ‚ÑÇ := generatingFunctional dŒº f

variable (f : TestFunction)
#check generatingFunctional dŒº f

axiom GJAxiom_OS3 : ‚àÄ (F : PositiveTimeTestFunction),
  0 ‚â§ (generatingFunctional‚ÑÇ dŒº (schwartzMul (star F.val) F.val)).re ‚àß
      (generatingFunctional‚ÑÇ dŒº (schwartzMul (star F.val) F.val)).im = 0
