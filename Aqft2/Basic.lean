/-
Copyright (c) 2025 MRD and SH. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors:
-/

import Mathlib.Algebra.Algebra.Defs
import Mathlib.Data.Complex.Exponential
import Mathlib.Analysis.InnerProductSpace.PiL2
import Mathlib.Analysis.InnerProductSpace.LinearMap
import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.Analysis.RCLike.Basic
import Mathlib.Analysis.NormedSpace.RCLike
import Mathlib.Analysis.NormedSpace.Real
import Mathlib.Analysis.NormedSpace.Extend
import Mathlib.Analysis.Complex.Basic
import Mathlib.Analysis.Normed.Group.Uniform
import Mathlib.Analysis.Analytic.Basic
import Mathlib.Analysis.Calculus.FDeriv.Basic
import Mathlib.Topology.Algebra.Module.WeakDual

import Mathlib.MeasureTheory.Measure.Decomposition.RadonNikodym
import Mathlib.MeasureTheory.Measure.Haar.OfBasis

import Mathlib.MeasureTheory.Function.LpSpace.Basic
import Mathlib.MeasureTheory.Function.L2Space
import Mathlib.MeasureTheory.Integral.Bochner.Basic
import Mathlib.MeasureTheory.Measure.CharacteristicFunction

import Mathlib.LinearAlgebra.UnitaryGroup
import Mathlib.LinearAlgebra.GeneralLinearGroup
import Mathlib.LinearAlgebra.Matrix.SpecialLinearGroup
import Mathlib.GroupTheory.GroupAction.Basic

-- Import our functional analysis utilities
import Aqft2.FunctionalAnalysis

-- Euclidean geometry definitions are now in Aqft2.Euclidean
-- but we define basic spacetime here to avoid circular imports
abbrev STDimension := 4
abbrev STvector : Type := (Fin STDimension) ‚Üí ‚Ñù
abbrev SpaceTime := EuclideanSpace ‚Ñù (Fin STDimension)

noncomputable instance : InnerProductSpace ‚Ñù SpaceTime := by infer_instance

abbrev getTimeComponent (x : SpaceTime) : ‚Ñù :=
 x ‚ü®0, by simp +arith‚ü©

open MeasureTheory NNReal ENNReal Complex
open TopologicalSpace Measure

-- Also open FunLike for SchwartzMap function application
open DFunLike (coe)

noncomputable section

variable {ùïú : Type} [RCLike ùïú]

abbrev Œº : Measure SpaceTime := volume    -- Lebesgue, just named ‚ÄúŒº‚Äù
variable [SigmaFinite Œº]

/- Distributions and test functions -/

abbrev TestFunction : Type := SchwartzMap SpaceTime ‚Ñù
abbrev TestFunctionùïú : Type := SchwartzMap SpaceTime ùïú
abbrev TestFunction‚ÑÇ := TestFunctionùïú (ùïú := ‚ÑÇ)

example : AddCommGroup TestFunction‚ÑÇ := by infer_instance
example : Module ‚ÑÇ TestFunction‚ÑÇ := by infer_instance

/- Space-time and test function setup -/

variable (x : SpaceTime)

/- Probability distribution over field configurations (distributions) -/
def pointwiseMulCLM : ‚ÑÇ ‚ÜíL[‚ÑÇ] ‚ÑÇ ‚ÜíL[‚ÑÇ] ‚ÑÇ := ContinuousLinearMap.mul ‚ÑÇ ‚ÑÇ

/-- Multiplication lifted to the Schwartz space. -/
def schwartzMul (g : TestFunction‚ÑÇ) : TestFunction‚ÑÇ ‚ÜíL[‚ÑÇ] TestFunction‚ÑÇ :=
  (SchwartzMap.bilinLeftCLM pointwiseMulCLM (SchwartzMap.hasTemperateGrowth_general g))



/-! ## Glimm-Jaffe Distribution Framework

The proper mathematical foundation for quantum field theory uses
tempered distributions as field configurations, following Glimm and Jaffe.
This section adds the distribution-theoretic definitions alongside
the existing L2 framework for comparison and gradual transition.
-/

/-- Field configurations as tempered distributions (dual to Schwartz space).
    This follows the Glimm-Jaffe approach where the field measure is supported
    on the space of distributions, not L2 functions.

    Using WeakDual gives the correct weak-* topology on the dual space. -/
abbrev FieldConfiguration := WeakDual ‚Ñù (SchwartzMap SpaceTime ‚Ñù)

-- Measurable space instance for distribution spaces
-- WeakDual already has the correct weak-* topology, we use the Borel œÉ-algebra
instance : MeasurableSpace FieldConfiguration := borel _

/-- The fundamental pairing between a field configuration (distribution) and a test function.
    This is ‚ü®œâ, f‚ü© in the Glimm-Jaffe notation.

    Note: FieldConfiguration = WeakDual ‚Ñù (SchwartzMap SpaceTime ‚Ñù) has the correct
    weak-* topology, making evaluation maps x ‚Ü¶ œâ(x) continuous for each test function x. -/
def distributionPairing (œâ : FieldConfiguration) (f : TestFunction) : ‚Ñù := œâ f

/-! ## Glimm-Jaffe Generating Functional

The generating functional in the distribution framework:
Z[J] = ‚à´ exp(i‚ü®œâ, J‚ü©) dŒº(œâ)
where the integral is over field configurations œâ (distributions).
-/

/-- The Glimm-Jaffe generating functional: Z[J] = ‚à´ exp(i‚ü®œâ, J‚ü©) dŒº(œâ)
    This is the fundamental object in constructive QFT. -/
def GJGeneratingFunctional (dŒº_config : ProbabilityMeasure FieldConfiguration)
  (J : TestFunction) : ‚ÑÇ :=
  ‚à´ œâ, Complex.exp (Complex.I * (distributionPairing œâ J : ‚ÑÇ)) ‚àÇdŒº_config.toMeasure

/-- Helper function to create a Schwartz map from a complex test function by applying a continuous linear map.
    This factors out the common pattern for extracting real/imaginary parts. -/
private def schwartz_comp_clm (f : TestFunction‚ÑÇ) (L : ‚ÑÇ ‚ÜíL[‚Ñù] ‚Ñù) : TestFunction :=
  SchwartzMap.mk (fun x => L (f x)) (by
    -- L is a continuous linear map, hence smooth
    exact ContDiff.comp L.contDiff f.smooth'
  ) (by
    -- Polynomial growth: since |L(z)| ‚â§ ||L|| * |z|, derivatives are controlled
    intro k n
    obtain ‚ü®C, hC‚ü© := f.decay' k n
    use C * (‚ÄñL‚Äñ : ‚Ñù)
    intro x
    -- |x|^k * |‚àÇ^n(L ‚àò f)(x)| ‚â§ ||L|| * |x|^k * |‚àÇ^n f(x)| ‚â§ ||L|| * C
    sorry -- Technical: derivatives of L ‚àò f are controlled by ||L|| * derivatives of f
  )

/-- Decompose a complex test function into its real and imaginary parts as real test functions.
    This is more efficient than separate extraction functions. -/
def complex_testfunction_decompose (f : TestFunction‚ÑÇ) : TestFunction √ó TestFunction :=
  (schwartz_comp_clm f Complex.reCLM, schwartz_comp_clm f Complex.imCLM)

/-- Complex version of the pairing: real field configuration with complex test function
    We extend the pairing by treating the complex test function as f(x) = f_re(x) + i*f_im(x)
    and defining ‚ü®œâ, f‚ü© = ‚ü®œâ, f_re‚ü© + i*‚ü®œâ, f_im‚ü© -/
def distributionPairing‚ÑÇ_real (œâ : FieldConfiguration) (f : TestFunction‚ÑÇ) : ‚ÑÇ :=
  -- Extract real and imaginary parts using our efficient decomposition
  let ‚ü®f_re, f_im‚ü© := complex_testfunction_decompose f
  -- Pair with the real field configuration and combine
  (œâ f_re : ‚ÑÇ) + Complex.I * (œâ f_im : ‚ÑÇ)

/-- Complex version of the generating functional -/
def GJGeneratingFunctional‚ÑÇ (dŒº_config : ProbabilityMeasure FieldConfiguration)
  (J : TestFunction‚ÑÇ) : ‚ÑÇ :=
  ‚à´ œâ, Complex.exp (Complex.I * (distributionPairing‚ÑÇ_real œâ J)) ‚àÇdŒº_config.toMeasure

/-- The mean field in the Glimm-Jaffe framework -/
def GJMean (dŒº_config : ProbabilityMeasure FieldConfiguration)
  (œÜ : TestFunction) : ‚Ñù :=
  ‚à´ œâ, distributionPairing œâ œÜ ‚àÇdŒº_config.toMeasure

-- Test the new definitions work correctly
variable (dŒº_config : ProbabilityMeasure FieldConfiguration)

#check GJGeneratingFunctional dŒº_config
#check GJGeneratingFunctional‚ÑÇ dŒº_config

/-! ## Summary of Basic Framework

This file provides the foundational definitions for the Glimm-Jaffe approach:

### 1. Field Configurations as Distributions
- `FieldConfiguration`: Tempered distributions (WeakDual of Schwartz space)
- `distributionPairing`: Fundamental pairing ‚ü®œâ, f‚ü©
- Proper weak-* topology for measure theory

### 2. Glimm-Jaffe Generating Functional
- `GJGeneratingFunctional`: Z[J] = ‚à´ exp(i‚ü®œâ, J‚ü©) dŒº(œâ)
- Complex versions for analyticity
- Connection to correlation functions

### 3. Field Correlations
- Note: All correlation functions (2-point, n-point) are handled in `Aqft2.Schwinger` via the Schwinger function framework

### 4. Complex Analyticity Framework
- `L2BilinearForm`: Symmetric bilinear forms (no conjugation!)
- Key for OS0 analyticity: B(z‚Ä¢f, g) = z * B(f, g)
- Foundation for complex analytic generating functionals

**Note**: Schwinger functions, distributions, and exponential series are now in `Aqft2.Schwinger`.
-/

end
